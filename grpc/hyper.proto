syntax = "proto3";

package user;

message User {
    string id = 1;
    string email = 2;
    string username = 3;
    string first_name = 4;
    string last_name = 5;
    string picture = 6;
}

// PW LOGIN API

message Login_User {
    string id = 1;
    string email = 2;
    string username = 3;
    string first_name = 4;
    string last_name = 5;
    string passwd = 6;
    string picture = 7;
}

message loginRequest {
    string username = 1;
}

message loginResponse {
    Login_User user = 1;
}

service login {
    rpc loginService (loginRequest) returns (loginResponse);
}

// SIGNUP API

message Signup_User {
    string email = 1;
    string first_name = 2;
    string last_name = 3;
    string username = 4;
    string passwd = 5;
    string picture = 6;
}

message signupRequest {
    Signup_User user = 1;
}

message signupResponse {
    User user = 1;
}

service signup {
    rpc signupService (signupRequest) returns (signupResponse);
}

// OAUTH API

message addUserRequest {
    User user = 1;
    string oauth_id = 2;
}

message addUserResponse {
    User user = 1;
}

service addUser {
    rpc addUserService (addUserRequest) returns (addUserResponse);
}

// GET USER API

message getUserRequest {
    string id = 1;
}

message getUserResponse {
    User user = 1;
}

service getUser {
    rpc getUserService (getUserRequest) returns (getUserResponse);
}

// USER SEARCH API

message searchUsersRequest {
    string query = 1;
}

message searchUsersResponse {
    repeated User users = 1;
}

service searchUsers {
    rpc searchUsersService (searchUsersRequest) returns (searchUsersResponse);
}

// USERNAME UPDATE API

message updateUsernameRequest {
    string id = 1;
    string username = 2;
}

message updateUsernameResponse {
    User user = 1;
}

service updateUsername {
    rpc updateUsernameService (updateUsernameRequest) returns (updateUsernameResponse);
}

// EMAIL UPDATE API

message updateEmailRequest {
    string id = 1;
    string email = 2;
}

message updateEmailResponse {
    User user = 1;
}

service updateEmail {
    rpc updateEmailService (updateEmailRequest) returns (updateEmailResponse);
}

// FIRST_NAME UPDATE API

message updateFirstnameRequest {
    string id = 1;
    string first_name = 2;
}

message updateFirstnameResponse {
    User user = 1;
}

service updateFirstname {
    rpc updateFirstnameService (updateFirstnameRequest) returns (updateFirstnameResponse);
}

// LAST_NAME UPDATE API

message updateLastnameRequest {
    string id = 1;
    string last_name = 2;
}

message updateLastnameResponse {
    User user = 1;
}

service updateLastname {
    rpc updateLastnameService (updateLastnameRequest) returns (updateLastnameResponse);
}


// rename to hyper.proto
// package hyper
// // AUTH API
// // USER API
// // MOVIES API

message Movie {
    string id = 1;
    string last_watched = 2;
    bool watched = 3;
    bool downloaded = 4;
    string download_path = 5;
}

message movieResponse {
    Movie movie = 1;
}

message addMovieRequest {
    string movie_id = 1;
    string user_id = 2;
    string download_path = 3;
}

message getMoviesRequest {
    string movie_id = 1;
    // optional string user_id = 2;
}

message getUserMoviesRequest {
    repeated string movie_ids = 1;
    string user_id = 2;
}

message getUserMoviesResponse {
    repeated string movie_ids = 1;
}

service MovieService {
    rpc getMovie (getMoviesRequest) returns (movieResponse);
    rpc getUserMovies (getUserMoviesRequest) returns (getUserMoviesResponse);
    rpc addMovie (addMovieRequest) returns (movieResponse);
}

// // COMMENTS API

message Comment {
    string id = 1;
    string author_id = 2;
    string movie_id = 3;
    string date = 4;
    string comment = 5;
}

message getCommentsRequest {
    string movie_id = 1;
    optional string author_id = 2;
}

message getCommentsResponse {
    repeated Comment comments = 1;
}

message addCommentRequest {
    string author_id = 1;
    string movie_id = 2;
    string comment = 3;
}

message addCommentResponse {
    bool success = 1;
}

service CommentService {
    rpc getComments (getCommentsRequest) returns (getCommentsResponse);
    rpc addComment (addCommentRequest) returns (addCommentResponse);
}
