syntax = "proto3";

package hyper;

// // // // // // // // // // // //  AUTH API

message User {
    string id = 1;
    string email = 2;
    string username = 3;
    string first_name = 4;
    string last_name = 5;
    string picture = 6;
}

message Login_User {
    string id = 1;
    string email = 2;
    string username = 3;
    string first_name = 4;
    string last_name = 5;
    string passwd = 6;
    string picture = 7;
}

message loginRequest {
    string username = 1;
}

message loginResponse {
    Login_User user = 1;
}

message Signup_User {
    string email = 1;
    string first_name = 2;
    string last_name = 3;
    string username = 4;
    string passwd = 5;
    string picture = 6;
}

message signupRequest {
    Signup_User user = 1;
}

message signupResponse {
    User user = 1;
}

message addUserRequest {
    User user = 1;
    string oauth_id = 2;
}

message addUserResponse {
    User user = 1;
}

service AuthService {
    rpc loginService (loginRequest) returns (loginResponse);
    rpc signupService (signupRequest) returns (signupResponse);
    rpc addUserService (addUserRequest) returns (addUserResponse);
}

// // // // // // // // // // // //  USER API

message searchUsersRequest {
    string query = 1;
}

message searchUsersResponse {
    repeated User users = 1;
}

message getUserRequest {
    string id = 1;
}

message updateUsernameRequest {
    string id = 1;
    string username = 2;
}

message updateEmailRequest {
    string id = 1;
    string email = 2;
}

message updateFirstnameRequest {
    string id = 1;
    string first_name = 2;
}

message updateLastnameRequest {
    string id = 1;
    string last_name = 2;
}

message updatePasswordRequest {
    string id = 1;
    string old_password = 2;
    string new_password = 3;
}

message updatePictureRequest {
    string id = 1;
    string picture = 2;
}

message userResponse {
    User user = 1;
}

service UserService {
    rpc searchUsersService (searchUsersRequest) returns (searchUsersResponse);
    rpc getUserService (getUserRequest) returns (userResponse);
    rpc updateUsernameService (updateUsernameRequest) returns (userResponse);
    rpc updateFirstnameService (updateFirstnameRequest) returns (userResponse);
    rpc updateLastnameService (updateLastnameRequest) returns (userResponse);
    rpc updateEmailService (updateEmailRequest) returns (userResponse);
    rpc updatePasswordService (updatePasswordRequest) returns (userResponse);
    rpc updatePictureService (updatePictureRequest) returns (userResponse);
}

// // // // // // // // // // // //  MOVIES API

message Movie {
    string id = 1;
    string last_watched = 2;
    bool watched = 3;
    bool downloaded = 4;
    string download_path = 5;
    int64 file_size = 6;
}

message movieResponse {
    Movie movie = 1;
}

message addMovieRequest {
    string movie_id = 1;
    string user_id = 2;
    string download_path = 3;
    int64 file_size = 4;
}

message getMoviesRequest {
    string movie_id = 1;
    // optional string user_id = 2;
}

message updateMovieRequest {
    string movie_id = 1;
    optional bool downloaded = 2;
    optional bool last_watched = 3;
}

message deleteMovieRequest {
    string movie_id = 1;
}

message deleteMovieResponse {
    bool success = 1;
}

message getUserMoviesRequest {
    repeated string movie_ids = 1;
    string user_id = 2;
}

message getUserMoviesResponse {
    repeated string movie_ids = 1;
}

message Empty {}

message moviesResponse {
    repeated Movie movies = 1;
}

service MovieService {
    rpc getMovie (getMoviesRequest) returns (movieResponse);
    rpc getMovies (Empty) returns (moviesResponse);
    rpc addMovie (addMovieRequest) returns (movieResponse);
    rpc updateMovie (updateMovieRequest) returns (movieResponse);
    rpc getUserMovies (getUserMoviesRequest) returns (getUserMoviesResponse);
    rpc deleteMovie (deleteMovieRequest) returns (deleteMovieResponse);
}

// // COMMENTS API

message Comment {
    string id = 1;
    string author_id = 2;
    string movie_id = 3;
    string date = 4;
    string comment = 5;
}

message getCommentsRequest {
    string movie_id = 1;
    optional string author_id = 2;
}

message getCommentsResponse {
    repeated Comment comments = 1;
}

message addCommentRequest {
    string author_id = 1;
    string movie_id = 2;
    string comment = 3;
}

message addCommentResponse {
    bool success = 1;
}

service CommentService {
    rpc getComments (getCommentsRequest) returns (getCommentsResponse);
    rpc addComment (addCommentRequest) returns (addCommentResponse);
}