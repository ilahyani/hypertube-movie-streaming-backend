# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from src.grpc import hyper_pb2 as hyper__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in hyper_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.loginService = channel.unary_unary(
                '/hyper.AuthService/loginService',
                request_serializer=hyper__pb2.loginRequest.SerializeToString,
                response_deserializer=hyper__pb2.loginResponse.FromString,
                _registered_method=True)
        self.signupService = channel.unary_unary(
                '/hyper.AuthService/signupService',
                request_serializer=hyper__pb2.signupRequest.SerializeToString,
                response_deserializer=hyper__pb2.signupResponse.FromString,
                _registered_method=True)
        self.addUserService = channel.unary_unary(
                '/hyper.AuthService/addUserService',
                request_serializer=hyper__pb2.addUserRequest.SerializeToString,
                response_deserializer=hyper__pb2.addUserResponse.FromString,
                _registered_method=True)


class AuthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def loginService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def signupService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addUserService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'loginService': grpc.unary_unary_rpc_method_handler(
                    servicer.loginService,
                    request_deserializer=hyper__pb2.loginRequest.FromString,
                    response_serializer=hyper__pb2.loginResponse.SerializeToString,
            ),
            'signupService': grpc.unary_unary_rpc_method_handler(
                    servicer.signupService,
                    request_deserializer=hyper__pb2.signupRequest.FromString,
                    response_serializer=hyper__pb2.signupResponse.SerializeToString,
            ),
            'addUserService': grpc.unary_unary_rpc_method_handler(
                    servicer.addUserService,
                    request_deserializer=hyper__pb2.addUserRequest.FromString,
                    response_serializer=hyper__pb2.addUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hyper.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hyper.AuthService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def loginService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.AuthService/loginService',
            hyper__pb2.loginRequest.SerializeToString,
            hyper__pb2.loginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def signupService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.AuthService/signupService',
            hyper__pb2.signupRequest.SerializeToString,
            hyper__pb2.signupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addUserService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.AuthService/addUserService',
            hyper__pb2.addUserRequest.SerializeToString,
            hyper__pb2.addUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class UserServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.updateLastnameService = channel.unary_unary(
                '/hyper.UserService/updateLastnameService',
                request_serializer=hyper__pb2.updateLastnameRequest.SerializeToString,
                response_deserializer=hyper__pb2.updateLastnameResponse.FromString,
                _registered_method=True)
        self.updateFirstnameService = channel.unary_unary(
                '/hyper.UserService/updateFirstnameService',
                request_serializer=hyper__pb2.updateFirstnameRequest.SerializeToString,
                response_deserializer=hyper__pb2.updateFirstnameResponse.FromString,
                _registered_method=True)
        self.updateEmailService = channel.unary_unary(
                '/hyper.UserService/updateEmailService',
                request_serializer=hyper__pb2.updateEmailRequest.SerializeToString,
                response_deserializer=hyper__pb2.updateEmailResponse.FromString,
                _registered_method=True)
        self.updateUsernameService = channel.unary_unary(
                '/hyper.UserService/updateUsernameService',
                request_serializer=hyper__pb2.updateUsernameRequest.SerializeToString,
                response_deserializer=hyper__pb2.updateUsernameResponse.FromString,
                _registered_method=True)
        self.searchUsersService = channel.unary_unary(
                '/hyper.UserService/searchUsersService',
                request_serializer=hyper__pb2.searchUsersRequest.SerializeToString,
                response_deserializer=hyper__pb2.searchUsersResponse.FromString,
                _registered_method=True)
        self.getUserService = channel.unary_unary(
                '/hyper.UserService/getUserService',
                request_serializer=hyper__pb2.getUserRequest.SerializeToString,
                response_deserializer=hyper__pb2.getUserResponse.FromString,
                _registered_method=True)


class UserServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def updateLastnameService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateFirstnameService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateEmailService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateUsernameService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def searchUsersService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUserService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'updateLastnameService': grpc.unary_unary_rpc_method_handler(
                    servicer.updateLastnameService,
                    request_deserializer=hyper__pb2.updateLastnameRequest.FromString,
                    response_serializer=hyper__pb2.updateLastnameResponse.SerializeToString,
            ),
            'updateFirstnameService': grpc.unary_unary_rpc_method_handler(
                    servicer.updateFirstnameService,
                    request_deserializer=hyper__pb2.updateFirstnameRequest.FromString,
                    response_serializer=hyper__pb2.updateFirstnameResponse.SerializeToString,
            ),
            'updateEmailService': grpc.unary_unary_rpc_method_handler(
                    servicer.updateEmailService,
                    request_deserializer=hyper__pb2.updateEmailRequest.FromString,
                    response_serializer=hyper__pb2.updateEmailResponse.SerializeToString,
            ),
            'updateUsernameService': grpc.unary_unary_rpc_method_handler(
                    servicer.updateUsernameService,
                    request_deserializer=hyper__pb2.updateUsernameRequest.FromString,
                    response_serializer=hyper__pb2.updateUsernameResponse.SerializeToString,
            ),
            'searchUsersService': grpc.unary_unary_rpc_method_handler(
                    servicer.searchUsersService,
                    request_deserializer=hyper__pb2.searchUsersRequest.FromString,
                    response_serializer=hyper__pb2.searchUsersResponse.SerializeToString,
            ),
            'getUserService': grpc.unary_unary_rpc_method_handler(
                    servicer.getUserService,
                    request_deserializer=hyper__pb2.getUserRequest.FromString,
                    response_serializer=hyper__pb2.getUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hyper.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hyper.UserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def updateLastnameService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.UserService/updateLastnameService',
            hyper__pb2.updateLastnameRequest.SerializeToString,
            hyper__pb2.updateLastnameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateFirstnameService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.UserService/updateFirstnameService',
            hyper__pb2.updateFirstnameRequest.SerializeToString,
            hyper__pb2.updateFirstnameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateEmailService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.UserService/updateEmailService',
            hyper__pb2.updateEmailRequest.SerializeToString,
            hyper__pb2.updateEmailResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateUsernameService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.UserService/updateUsernameService',
            hyper__pb2.updateUsernameRequest.SerializeToString,
            hyper__pb2.updateUsernameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def searchUsersService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.UserService/searchUsersService',
            hyper__pb2.searchUsersRequest.SerializeToString,
            hyper__pb2.searchUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getUserService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.UserService/getUserService',
            hyper__pb2.getUserRequest.SerializeToString,
            hyper__pb2.getUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MovieServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getMovie = channel.unary_unary(
                '/hyper.MovieService/getMovie',
                request_serializer=hyper__pb2.getMoviesRequest.SerializeToString,
                response_deserializer=hyper__pb2.movieResponse.FromString,
                _registered_method=True)
        self.getUserMovies = channel.unary_unary(
                '/hyper.MovieService/getUserMovies',
                request_serializer=hyper__pb2.getUserMoviesRequest.SerializeToString,
                response_deserializer=hyper__pb2.getUserMoviesResponse.FromString,
                _registered_method=True)
        self.addMovie = channel.unary_unary(
                '/hyper.MovieService/addMovie',
                request_serializer=hyper__pb2.addMovieRequest.SerializeToString,
                response_deserializer=hyper__pb2.movieResponse.FromString,
                _registered_method=True)


class MovieServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUserMovies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MovieServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.getMovie,
                    request_deserializer=hyper__pb2.getMoviesRequest.FromString,
                    response_serializer=hyper__pb2.movieResponse.SerializeToString,
            ),
            'getUserMovies': grpc.unary_unary_rpc_method_handler(
                    servicer.getUserMovies,
                    request_deserializer=hyper__pb2.getUserMoviesRequest.FromString,
                    response_serializer=hyper__pb2.getUserMoviesResponse.SerializeToString,
            ),
            'addMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.addMovie,
                    request_deserializer=hyper__pb2.addMovieRequest.FromString,
                    response_serializer=hyper__pb2.movieResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hyper.MovieService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hyper.MovieService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MovieService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.MovieService/getMovie',
            hyper__pb2.getMoviesRequest.SerializeToString,
            hyper__pb2.movieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getUserMovies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.MovieService/getUserMovies',
            hyper__pb2.getUserMoviesRequest.SerializeToString,
            hyper__pb2.getUserMoviesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.MovieService/addMovie',
            hyper__pb2.addMovieRequest.SerializeToString,
            hyper__pb2.movieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CommentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getComments = channel.unary_unary(
                '/hyper.CommentService/getComments',
                request_serializer=hyper__pb2.getCommentsRequest.SerializeToString,
                response_deserializer=hyper__pb2.getCommentsResponse.FromString,
                _registered_method=True)
        self.addComment = channel.unary_unary(
                '/hyper.CommentService/addComment',
                request_serializer=hyper__pb2.addCommentRequest.SerializeToString,
                response_deserializer=hyper__pb2.addCommentResponse.FromString,
                _registered_method=True)


class CommentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getComments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getComments': grpc.unary_unary_rpc_method_handler(
                    servicer.getComments,
                    request_deserializer=hyper__pb2.getCommentsRequest.FromString,
                    response_serializer=hyper__pb2.getCommentsResponse.SerializeToString,
            ),
            'addComment': grpc.unary_unary_rpc_method_handler(
                    servicer.addComment,
                    request_deserializer=hyper__pb2.addCommentRequest.FromString,
                    response_serializer=hyper__pb2.addCommentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hyper.CommentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hyper.CommentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CommentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.CommentService/getComments',
            hyper__pb2.getCommentsRequest.SerializeToString,
            hyper__pb2.getCommentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hyper.CommentService/addComment',
            hyper__pb2.addCommentRequest.SerializeToString,
            hyper__pb2.addCommentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
